name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black
        
    - name: Lint with Ruff
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        ruff check app/ tests/ --select=E9,F63,F7,F82 --show-source
        # Lint all files
        ruff check app/ tests/ --show-source
        
    - name: Format check with Black
      run: |
        black --check app/ tests/
        
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
      env:
        REDIS_URL: redis://localhost:6379/15

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t fraud-mev-monitor:latest .
        
    - name: Test Docker image
      run: |
        # Start services in background
        docker compose up -d redis
        
        # Wait for Redis to be ready
        sleep 5
        
        # Test that our image can start
        docker run --rm --network fraud-mev-monitor_default \
          -e REDIS_URL=redis://redis:6379/0 \
          fraud-mev-monitor:latest python -c "
import asyncio
from app.main import app
print('App imported successfully')
"